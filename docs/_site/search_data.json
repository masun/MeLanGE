{
    "license-html": {
        "title": "License",
        "content": "MeLanGE is licensed under the MIT License: MIT License Copyright (c) 2021 Sandra Godinho Silva Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "url": " /License.html",
        "author": ""
    },
    "description-html": {
        "title": "MeLanGE description",
        "content": "MeLanGE context The problem Machine learning is a field of artificial intelligence gaining popularity in all areas of knowledge, including modern research in biological sciences. However, its use in bacterial comparative genomics, specifically as an aid in microbiome studies, is still in its infancy. This is mainly due to the inexistence of easy-to-use tools that correspond to researchers’ needs. With the advent of high-throughput DNA sequencing technologies, the amount of genomic data available far outweighs the amount of data being thoroughly exploited. This can be partially explained by the difficulties in sorting and cross-comparing large amounts of data, which usually renders computationally intensive and oftentimes intractable. However, such large comparative genomics studies can be essential to delineate key genomic or functional traits of different groups of organisms based on phylogeny, taxonomy, ecosystem provenance, etc. Our solution MeLanGe (Machine Learning for Genomics) aims to facilitate large-scale comparative genomics studies by blending different annotation schemes and machine learning procedures to rapidly discern hallmark features between genome/metagenome groups in highly complex datasets. MeLanGe performs automatic, multi parallel genome annotations using diverse databases such as Pfam, COG, Kegg and CAZYmes, and returns these annotations in a tabular format that can be used in further studies. In addition, given user-input metadata, MeLanGe can perform a semi-automatic feature selection process that identifies which key functions better characterize each genome group. Performance In a pilot study, from 6986 Pfam functions identified across 1256 marine and terrestrial bacterial genomes of the Flavobacteriaceae family, MeLanGe was able to reduce dataset complexity to as few as 81 traits that possess high correlation with organism origin, serving thus as indicators of environmental specialization. In conclusion, this tool can be an important player in the transition of microbiome studies to the “big data” era and provide an unprecedented opportunity to easily explore large groups of genomes. 1 Genome annotation MeLanGE allows the quick annotation of a group of genomes with several databases and gives as final output formatted tables with the annotations per genome. All the tools in use are from third-parties. To get more information about them, please check the links and references. 1.1 Third-parties databases and scripts: Gene calling and general annotation Prokka Functional annotation Pfam To annotate the genomes into Pfams, a local database is created. Lastest Pfam-A.hmm COG cdd2cog Kegg prokka2kegg - script that converts prokka annotation output into the respective KEGG IDs. 1.2 Output files: Statistics.csv - % of Orfs annotated with each database. for each database: counts, presence/absence (PA) and relative abundance tables. Pfam_description.csv, Cog_description.csv, Kegg_description.csv - the mapping of the identified annotation with clans, names, descriptions, etc. folder Orf_per_genome: each genome has a unique file containing all orfs identified by Prokka and the subsequent annotations with the four different databases. 2 Feature Selection",
        "url": " /description.html",
        "author": ""
    },
    "getting-started-html": {
        "title": "Getting started",
        "content": "Setup MeLanGE is based on snakemake workflow manager, allowing to run all the steps of the workflow in parallel on a cluster. Apart from conda, all databases and dependencies are installed on the fly. Conda package manager MeLanGE has one dependency: conda. You need to install anaconda or miniconda. If you haven’t done it already you need to configure conda with the bioconda-channel and the conda-forge channel. This are sources for packages beyond the default one: conda config --add channels defaults conda config --add channels bioconda conda config --add channels conda-forge Install mamba Conda can be a bit slow because there are so many packages. A good way around this is to use [mamba] (another snake). conda install mamba From now on you can replace conda install with mamba install (check how much faster this snake is!) Install MeLanGE To run MeLange, the only necessary step is to have git installed in your computer and clone MeLanGE repository. For instructions on how to install git: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git Clone the repository: git clone https://github.com/sandragodinhosilva/MeLanGE.git Test correct installation with example data To test MeLanGE correct installation, you can use example data. This data is automatically downloaded once you clone MeLanGE repository. Just ensure the following setting in the config.yaml file: # --- Input inputdir: \"example_data\" Test your configuration by performing a dry-run via: snakemake --use-conda -n",
        "url": " /getting_started.html",
        "author": ""
    },
    "": {
        "title": "Home",
        "content": "MeLanGE - Documentation MeLanGE is a automated pipeline for the genomic annotation of a group of genomes, followed by the detection of the most important features to distinguish a group of genomes, as determined by a metadata label. MeLanGE has two independent, but connected, components: * Genome annotation * Feature selection MeLanGE is implemented in a Snakemake workflow, thus contributing to reproducible and scalable data analysis. Quick setup Step 0: Install conda, snakemake and ensure git Conda and Snakemake are required to be able to use MeLanGE. Most people would probably want to install Miniconda. After having conda installed, install Snakemake: # As described in Snakemake documentation: conda install -c conda-forge mamba mamba create -c conda-forge -c bioconda -n snakemake snakemake conda activate snakemake Step 1: Clone workflow To use MeLanGE, you need a local copy of the workflow repository. Start by making a clone of the repository: git clone https://github.com/sandragodinhosilva/MeLanGE.git Step 2: Configure workflow Configure the workflow according to your needs by editing the file config.yaml. Step 3: Execute workflow Test your configuration by performing a dry-run via snakemake --use-conda -n Execute the workflow locally via snakemake --use-conda --cores N This will run the workflow locally using N cores. Optional: Examine workflow: snakemake --dag | dot -Tsvg &gt; dag.svg Investigate results: After successful execution, you can create a self-contained interactive HTML report with all results via: snakemake --report report.html Future implementations Improve report output. Citing For now MeLanGE does not have a publication describing its functionalities (we are working on it). Please use a link to MeLanGE github when you reference this tool.",
        "url": " /",
        "author": ""
    },
    "running-html": {
        "title": "Running MeLanGE",
        "content": "How to run MeLanGE Configure workflow Configure the workflow according to your needs by editing the file config.yaml. Execute workflow Test your configuration by performing a dry-run via snakemake --use-conda -n Execute the workflow locally via snakemake --use-conda --cores N This will run the workflow locally using N cores. Verify workflow &amp; results Examine workflow: Snakemake has some cool features which are implemented in MeLanGE. One of them is the possibility of automatically creating directed acyclic graph (DAG) of jobs that allows the visualization of the whole workflow. By running a single command: snakemake --dag | dot -Tsvg &gt; dag.svg A DAG (saved as a .svg figure) is created. It contains a node for each job with the edges connecting them representing the dependencies. The frames of jobs that don’t need to be run (because their output is up-to-date) are dashed. Example: Investigate results: After successful execution, you can create a self-contained interactive HTML report with all results via: snakemake --report report.html",
        "url": " /running.html",
        "author": ""
    },
    ".": {
        ".": "."
    }
}
